generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== SCHOOL & ORGANIZATION =====

model School {
  id             String    @id @default(uuid())
  name           String
  registrationNo String?   @unique
  type           SchoolType
  county         String
  subCounty      String?
  ward           String?
  knecCode       String?   @unique  // KNEC school code
  nemisCode      String?   @unique  // NEMIS code for reporting
  
  // Contact
  phone          String?
  email          String?
  address        String?
  
  // School characteristics
  ownership      Ownership
  boardingStatus BoardingStatus
  gender         SchoolGender
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  users          User[]
  classes        Class[]
  students       Student[]
  streams        Stream[]
  subjectOfferings SubjectOffering[]
  
  @@index([county])
  @@index([type])
}

enum SchoolType {
  PRIMARY
  SECONDARY
  TVET
  SPECIAL_NEEDS
  PRE_PRIMARY
}

enum Ownership {
  PUBLIC
  PRIVATE
  FAITH_BASED
  NGO
}

enum BoardingStatus {
  DAY
  BOARDING
  BOTH
}

enum SchoolGender {
  BOYS
  GIRLS
  MIXED
}

// ===== USERS & PROFILES =====

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  middleName String?
  phone     String?
  idNumber  String?   @unique  // National ID or Birth Cert No
  tscNumber String?   @unique  // For teachers - TSC number
  role      Role     @default(TEACHER)

  schoolId  String?
  school    School?  @relation(fields: [schoolId], references: [id])

  // Role profiles
  student   Student?
  teacher   Teacher?
  guardian  Guardian?

  // Relations
  classTeacherOf Class[]       @relation("ClassTeacher")
  streamTeacherOf Stream[]     @relation("StreamTeacher")
  teachingSubjects ClassSubject[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([role])
  @@index([schoolId])
}

enum Role {
  SUPER_ADMIN    // System admin
  ADMIN          // School admin
  TEACHER
  STUDENT
  PARENT
  SUPPORT_STAFF
}

model Student {
  id              String    @id @default(uuid())
  admissionNo     String    @unique
  upiNumber       String?   @unique  // Unique Personal Identifier
  nemisUpi        String?   @unique  // NEMIS UPI
  
  firstName       String
  middleName      String?
  lastName        String
  gender          Gender
  dob             DateTime?
  birthCertNo     String?
  
  // Kenyan-specific
  nationality     String    @default("Kenyan")
  county          String?
  subCounty       String?
  
  // Special needs
  hasSpecialNeeds Boolean   @default(false)
  specialNeedsType String?  // Visual, Hearing, Physical, Learning, etc.
  
  // Medical
  medicalCondition String?
  allergies        String?
  
  schoolId        String?
  school          School?   @relation(fields: [schoolId], references: [id])

  userId          String?   @unique
  user            User?     @relation(fields: [userId], references: [id])

  // Relations
  enrollments     StudentClass[]
  guardians       StudentGuardian[]
  assessments     Assessment[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([schoolId])
  @@index([admissionNo])
}

enum Gender {
  MALE
  FEMALE
}

model Guardian {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  
  relationship    String   // Father, Mother, Guardian, etc.
  occupation      String?
  employer        String?
  workPhone       String?
  
  students        StudentGuardian[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model StudentGuardian {
  id          String   @id @default(uuid())
  studentId   String
  guardianId  String
  isPrimary   Boolean  @default(false)
  
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  guardian    Guardian @relation(fields: [guardianId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, guardianId])
}

model Teacher {
  id             String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  
  tscNumber      String   @unique
  employmentType EmploymentType
  qualification  String?  // Diploma, Degree, Masters, etc.
  specialization String?  // Subject specialization
  
  dateJoined     DateTime?
  
  classSubjects  ClassSubject[]   @relation(\"TeacherClassSubjects\")
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum EmploymentType {
  PERMANENT
  CONTRACT
  TEMPORARY
  BOM          // Board of Management
  PTA          // Parents Teachers Association
}

// ===== ACADEMIC STRUCTURE =====

model AcademicYear {
  id        String   @id @default(uuid())
  year      Int      @unique  // e.g., 2024
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(false)
  
  terms          Term[]
  classes        Class[]
  classSubjects  ClassSubject[]   @relation(\"TeacherClassSubjects\")
  studentClasses StudentClass[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([isActive])
}

model Term {
  id             String   @id @default(uuid())
  name           TermName
  termNumber     Int      // 1, 2, or 3
  startDate      DateTime
  endDate        DateTime
  
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  
  classSubjects  ClassSubject[]   @relation(\"TeacherClassSubjects\")
  assessments    Assessment[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([academicYearId, termNumber])
  @@index([academicYearId])
}

enum TermName {
  TERM_1
  TERM_2
  TERM_3
}

// ===== CURRICULUM & CLASSES =====

model Class {
  promotedStudents   StudentClass[]   @relation(\"Promotion\")
  id             String      @id @default(uuid())
  name           String       // e.g., "Grade 7", "Form 3"
  level          String       // Grade/Form level
  curriculum     Curriculum
  
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id])
  
  classTeacherId String?
  classTeacher   User?        @relation("ClassTeacher", fields: [classTeacherId], references: [id])
  
  // For CBC: Track which pathway/strand
  pathway        Pathway?
  
  streams        Stream[]
  students       StudentClass[]
  subjects       ClassSubject[]
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([name, academicYearId, schoolId])
  @@index([curriculum])
  @@index([schoolId])
}

enum Curriculum {
  CBC              // Competency Based Curriculum (2-6-3-3)
  EIGHT_FOUR_FOUR  // 8-4-4 System (being phased out)
  TVET             // Technical & Vocational
  IGCSE            // International
  IB               // International Baccalaureate
}

enum Pathway {
  // CBC Junior Secondary pathways
  STEM            // Science, Technology, Engineering, Math
  ARTS_SPORTS     // Arts and Sports Sciences
  SOCIAL_SCIENCES // Social Sciences
}

// Streams within a class (e.g., Form 3 North, Form 3 South)
model Stream {
  id             String   @id @default(uuid())
  name           String   // North, South, East, West, etc.
  capacity       Int?
  
  classId        String
  class          Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  schoolId       String
  school         School   @relation(fields: [schoolId], references: [id])
  
  streamTeacherId String?
  streamTeacher   User?   @relation("StreamTeacher", fields: [streamTeacherId], references: [id])
  
  students       StudentClass[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([classId, name])
  @@index([classId])
}

// ===== SUBJECTS =====

model Subject {
  id            String   @id @default(uuid())
  name          String
  code          String   @unique
  
  // Subject classification
  category      SubjectCategory
  isCore        Boolean  @default(false)  // Compulsory for all
  
  // CBC-specific
  learningArea  LearningArea?  // For CBC subjects
  
  // 8-4-4 specific
  subjectGroup  SubjectGroup?  // Sciences, Languages, etc.
  
  curriculum    Curriculum[]   // Which curricula offer this subject
  
  description   String?
  
  offerings     SubjectOffering[]
  classLinks    ClassSubject[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([code])
  @@index([category])
}

enum SubjectCategory {
  CORE
  ELECTIVE
  OPTIONAL
  TECHNICAL
  APPLIED
}

enum LearningArea {
  // CBC Learning Areas
  LANGUAGES
  MATHEMATICS
  SCIENCE_TECHNOLOGY
  SOCIAL_STUDIES
  RELIGIOUS_EDUCATION
  CREATIVE_ARTS
  PHYSICAL_HEALTH_EDUCATION
  PRE_TECHNICAL_STUDIES
}

enum SubjectGroup {
  // 8-4-4 Groups
  LANGUAGES
  SCIENCES
  HUMANITIES
  TECHNICAL_APPLIED
  BUSINESS_STUDIES
}

// Subjects offered by a school
model SubjectOffering {
  id        String   @id @default(uuid())
  schoolId  String
  subjectId String
  
  school    School   @relation(fields: [schoolId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  
  isActive  Boolean  @default(true)
  
  @@unique([schoolId, subjectId])
}

model ClassSubject {
  id             String      @id @default(uuid())
  classId        String
  subjectId      String
  teacherId      String
  termId         String
  academicYearId String
  
  class          Class        @relation(fields: [classId], references: [id])
  subject        Subject      @relation(fields: [subjectId], references: [id])
  teacher        User         @relation(fields: [teacherId], references: [id])
  term           Term         @relation(fields: [termId], references: [id])
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  
  // CBC: Strand/Sub-strand tracking
  strands        String?      // JSON array of strand IDs
  
  assessments    Assessment[]
  
  @@unique([classId, subjectId, termId, academicYearId])
  @@index([teacherId])
}

// ===== STUDENT ENROLLMENT =====

model StudentClass {
  id             String          @id @default(uuid())
  studentId      String
  classId        String
  streamId       String?         // Optional stream assignment
  academicYearId String
  
  status         EnrollmentStatus @default(ACTIVE)
  
  // For subject selection (especially CBC pathways & electives)
  selectedSubjects String[]       // Array of subject IDs (now strings)
  
  // Promotion tracking
  promotedToId   String?
  promotionDate  DateTime?
  
  // Transfer tracking
  transferredFrom String?
  transferDate   DateTime?
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  student        Student      @relation(fields: [studentId], references: [id])
  class          Class        @relation(fields: [classId], references: [id])
  stream         Stream?      @relation(fields: [streamId], references: [id])
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  promotedTo   Class?   @relation(\"Promotion\", fields: [promotedToId], references: [id])
  
  @@index([studentId])
  @@index([classId])
  @@index([status])
}

enum EnrollmentStatus {
  ACTIVE
  PROMOTED
  TRANSFERRED
  GRADUATED
  DROPPED_OUT
  SUSPENDED
}

// ===== ASSESSMENT & GRADING =====

model Assessment {
  id             String   @id @default(uuid())
  name           String   // CAT1, Midterm, End of Term, etc.
  type           AssessmentType
  
  studentId      String
  classSubjectId String
  termId         String
  
  // Marks
  marksObtained  Float?
  maxMarks       Float
  
  // CBC: Competency-based assessment
  competencyLevel CompetencyLevel?
  
  // 8-4-4: Traditional grading
  grade          String?  // A, B+, B, etc.
  
  remarks        String?
  assessedBy     String?  
  assessedDate   DateTime?
  
  student        Student       @relation(fields: [studentId], references: [id])
  classSubject   ClassSubject  @relation(fields: [classSubjectId], references: [id])
  term           Term          @relation(fields: [termId], references: [id])
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([studentId])
  @@index([classSubjectId])
  @@index([termId])
}

enum AssessmentType {
  CAT             // Continuous Assessment Test
  MIDTERM
  END_OF_TERM
  MOCK
  NATIONAL_EXAM   // KCPE/KCSE
  COMPETENCY_BASED
}

enum CompetencyLevel {
  // CBC Competency Levels
  EXCEEDING_EXPECTATIONS
  MEETING_EXPECTATIONS
  APPROACHING_EXPECTATIONS
  BELOW_EXPECTATIONS
}